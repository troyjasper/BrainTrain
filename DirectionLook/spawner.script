local counter = 0
local spawn_rate = 2
local screen_width, screen_height = 0
local game_object = nil
local sprite_size = {x=100, y=100} -- hardcoded from the tilesource because I don't have a better idea
local score = 0
local bird_instance_id = nil

local Direction = { 
	UP = 0,
	DOWN = 1,
	LEFT = 2,
	RIGHT = 3
}

function init(self)

	-- Calculate the center of the screen
	screen_width, screen_height = window.get_size()

	local center_x = screen_width / 2
	local center_y = screen_height / 2
	local pos = vmath.vector3( center_x, center_y, 0 )
	local pos2 = vmath.vector3( 480, 320, 0 )

	spawn_new_bird(self)
	msg.post(".", "acquire_input_focus")
end

function get_new_pos(self)
	return vmath.vector3(math.random()*(screen_width-sprite_size.x*2)+sprite_size.x, math.random()*(screen_height-sprite_size.y*2)+sprite_size.y, 0)
end

function spawn_new_bird(self)
	if game_object then
		go.delete(game_object)
	end
	local position = get_new_pos(self)
	local props = { [hash("/bird")] = { direction = math.random(0,3) } }
	game_object = collectionfactory.create("#burbmaker", position, nil, props)
	bird_instance_id = game_object[hash("/bird")]
	pprint(game_object[hash("/bird")])
	pprint(game_object)
	pprint(go.get(bird_instance_id, "direction"))
end

function on_input(self, action_id, action)
	-- if action_id == hash("touch") and action.pressed then
	-- 	-- Check if a game object was tapped
	-- 	
	-- 	local game_object = collectionfactory.create("#burbmaker", vmath.vector3(action.x, action.y, 0))
	-- end
	local tempscore = 0
	local burb_direction = go.get( bird_instance_id , "direction")
	
	if action_id == hash("up") and burb_direction == Direction.UP then
		tempscore = tempscore + 1
	elseif action_id == hash("down") and burb_direction == Direction.DOWN then
		tempscore = tempscore + 1
	elseif action_id == hash("left") and burb_direction == Direction.LEFT then
		tempscore = tempscore + 1
	elseif action_id == hash("right") and burb_direction == Direction.RIGHT then
		tempscore = tempscore + 1
	end

	-- If the score was incremented, delete the current game object and spawn a new one
	if tempscore > 0 then
		score = score + tempscore
		spawn_new_bird(self)
	end
end

function update(self, dt)
	counter = counter + dt
	if counter >= spawn_rate then
		counter = counter - spawn_rate

		spawn_new_bird(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash(s)
end